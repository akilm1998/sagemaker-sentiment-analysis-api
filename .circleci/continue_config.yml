version: 2.1

parameters:
  role_arn:
    type: string
    default: "arn:aws:iam::313078327096:role/circleci-oidc-role"
    description: "Optional: role ARN to assume. If empty, the job will error and ask you to pass one."
  deploy-terraform:
    type: boolean
    default: false

orbs:
  terraform: circleci/terraform@3.7.0

executors:
  python-executor:
    docker:
      - image: cimg/python:3.10

anchors:
  deployment-branch-condition: &deployment-branch-condition
    filters:
      branches:
        only: main

jobs:
  test:
    executor: python-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - poetry-cache-v3-{{ checksum "poetry.lock" }}
            - poetry-cache-v3-
      - run:
          name: Run tests
          command: |
            source .venv/bin/activate
            pytest -q

  lint:
    executor: python-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - poetry-cache-v3-{{ checksum "poetry.lock" }}
            - poetry-cache-v3-
      - run:
          name: Lint code (Black + Flake8)
          command: |
            source .venv/bin/activate
            black --check src tests
            flake8 src tests

  assume-role-and-terraform:
    docker:
      - image: python:3.10-slim
    parameters:
      role_arn:
        type: string
        default: ""
        description: "AWS role ARN to assume via OIDC (required)"
    steps:
      - checkout

      - run:
          name: Install AWS CLI and Terraform (simplified + guaranteed)
          command: |
            set -euo pipefail
            export DEBIAN_FRONTEND=noninteractive
            apt-get update -y
            apt-get install -y curl unzip gnupg ca-certificates

            python3 -m pip install --upgrade pip awscli
            aws --version

            TERRAFORM_VERSION="1.9.7"
            curl -fsSL "https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip" -o terraform.zip
            unzip terraform.zip
            mv terraform /usr/local/bin/
            chmod +x /usr/local/bin/terraform
            rm terraform.zip

            terraform version

      - run:
          name: Assume AWS Role via OIDC
          command: |
            set -euo pipefail
            if [ -z "<< parameters.role_arn >>" ]; then
              echo "ERROR: role_arn parameter is empty."
              exit 1
            fi
            if [ -z "${CIRCLE_OIDC_TOKEN:-}" ]; then
              echo "ERROR: CIRCLE_OIDC_TOKEN not present. Enable OIDC in CircleCI project settings."
              exit 1
            fi
            ROLE_ARN="<< parameters.role_arn >>"
            SESSION_NAME="circleci-oidc-$(date +%s)"
            echo "Assuming role: ${ROLE_ARN}"
            CREDS_JSON=$(aws sts assume-role-with-web-identity \
              --role-arn "${ROLE_ARN}" \
              --role-session-name "${SESSION_NAME}" \
              --web-identity-token "${CIRCLE_OIDC_TOKEN}" \
              --duration-seconds 900)
            export AWS_ACCESS_KEY_ID=$(echo "$CREDS_JSON" | python3 -c 'import sys,json; print(json.load(sys.stdin)["Credentials"]["AccessKeyId"])')
            export AWS_SECRET_ACCESS_KEY=$(echo "$CREDS_JSON" | python3 -c 'import sys,json; print(json.load(sys.stdin)["Credentials"]["SecretAccessKey"])')
            export AWS_SESSION_TOKEN=$(echo "$CREDS_JSON" | python3 -c 'import sys,json; print(json.load(sys.stdin)["Credentials"]["SessionToken"])')
            aws sts get-caller-identity

      - run:
          name: Terraform Apply (OIDC + Main Infra)
          command: |
            set -euo pipefail
            echo "ðŸš€ Deploying infra/circleci-oidc..."
            cd infra/circleci-oidc
            terraform init -input=false
            terraform plan -input=false -out=tfplan
            terraform apply -auto-approve tfplan
            echo "âœ… circleci-oidc deployment complete"

            echo "ðŸš€ Deploying main infra..."
            cd ../
            terraform init -input=false
            terraform plan -input=false -out=tfplan
            terraform apply -auto-approve tfplan
            echo "âœ… Main infra deployment complete"

      - run:
          name: Cleanup AWS creds
          command: |
            unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN || true
            echo "ðŸ§¹ Temporary AWS credentials cleared."

workflows:
  version: 2
  main-pipeline:
    jobs:
      # - test:
      #     <<: *deployment-branch-condition
      # - lint:
      #     requires:
      #       - test
      #     <<: *deployment-branch-condition
      - assume-role-and-terraform:
          # requires:
          #   - lint
          <<: *deployment-branch-condition
          role_arn: << pipeline.parameters.role_arn >>
