version: 2.1

# Pipeline parameter: pass a role ARN at pipeline trigger time
parameters:
  role_arn:
    type: string
    default: "arn:aws:iam::313078327096:role/circleci-oidc-role"
    description: "Optional: role ARN to assume. If empty, the job will error and ask you to pass one."

  deploy-terraform:
    type: boolean
    default: false

orbs:
  continuation: circleci/continuation@2.0.1
  path-filtering: circleci/path-filtering@2.0.4
  terraform: circleci/terraform@3.7.0

executors:
  python-executor:
    docker:
      - image: cimg/python:3.10

anchors:
  deployment-branch-condition: &deployment-branch-condition
    filters:
      branches:
        only: main

jobs:
  test:
    executor: python-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - poetry-cache-v2-{{ checksum "poetry.lock" }}
            # - poetry-cache-
      - run:
          name: Install Poetry and project deps
          command: |
            python -m pip install --upgrade pip
            python -m pip install poetry
            poetry config virtualenvs.create true --local
            poetry install --no-interaction --no-ansi
      - run:
          name: Run tests
          command: |
            poetry run pytest -q

  lint:
    executor: python-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - poetry-cache-v2-{{ checksum "poetry.lock" }}
            # - poetry-cache-
      - run:
          name: Install Poetry and lint deps
          command: |
            python -m pip install --upgrade pip
            python -m pip install poetry
            poetry config virtualenvs.create true --local
            poetry install --no-interaction --no-ansi
      - run:
          name: Lint code (fail fast)
          command: |
            set -e
            poetry run black --check src tests
            poetry run flake8 src tests

  assume-role-job:
    executor: python-executor
    parameters:
      role_arn:
        type: string
        default: ""
        description: "The AWS role ARN to assume via OIDC (required)"
    steps:
      - checkout
      - attach_workspace:
          at: .

      - restore_cache:
          keys:
            - poetry-cache-v2-{{ checksum "poetry.lock" }}

      - run:
          name: Install Poetry and project deps (includes awscli)
          command: |
            set -euo pipefail
            python -m pip install --upgrade pip
            python -m pip install poetry
            poetry config virtualenvs.create true --local
            poetry install --no-interaction --no-ansi

            echo "poetry venv path: $(poetry env info -p || echo 'none')"
            echo "Verify aws present via poetry:"
            poetry run aws --version || (echo "poetry-run aws not found; check awscli in pyproject" && exit 1)

      - run:
          name: Assume role (OIDC) and run AWS actions (single shell)
          command: |
            # single shell so exported envs persist for following aws calls
            set -euo pipefail

            # input validation
            if [ -z "<< parameters.role_arn >>" ]; then
              echo "ERROR: role_arn parameter is empty. Provide the role ARN by passing pipeline parameter 'role_arn'."
              exit 1
            fi
            if [ -z "${CIRCLE_OIDC_TOKEN:-}" ]; then
              echo "ERROR: CIRCLE_OIDC_TOKEN not present. Ensure OIDC is enabled for this CircleCI project."
              exit 1
            fi

            ROLE_ARN="<< parameters.role_arn >>"
            SESSION_NAME="circleci-oidc-$(date +%s)"

            echo "Attempting to assume role: ${ROLE_ARN}, session: ${SESSION_NAME}"

            # Run assume-role-with-web-identity via poetry so aws binary resolves
            CREDS_JSON=$(poetry run aws sts assume-role-with-web-identity \
              --role-arn "${ROLE_ARN}" \
              --role-session-name "${SESSION_NAME}" \
              --web-identity-token "${CIRCLE_OIDC_TOKEN}" \
              --duration-seconds 900) || {
                echo "ERROR: assume-role-with-web-identity failed. See output above."
                exit 1
              }

            # quick check the JSON is not empty
            if [ -z "${CREDS_JSON:-}" ] || ! printf '%s' "$CREDS_JSON" | grep -q '"Credentials"'; then
              echo "ERROR: assume-role returned no credentials. Dumping response:"
              printf '%s\n' "$CREDS_JSON"
              exit 1
            fi

            # Extract creds (poetry-run python to ensure same venv python)
            export AWS_ACCESS_KEY_ID=$(printf '%s' "$CREDS_JSON" | poetry run python -c 'import sys,json; print(json.load(sys.stdin)["Credentials"]["AccessKeyId"])')
            export AWS_SECRET_ACCESS_KEY=$(printf '%s' "$CREDS_JSON" | poetry run python -c 'import sys,json; print(json.load(sys.stdin)["Credentials"]["SecretAccessKey"])')
            export AWS_SESSION_TOKEN=$(printf '%s' "$CREDS_JSON" | poetry run python -c 'import sys,json; print(json.load(sys.stdin)["Credentials"]["SessionToken"])')

            echo "Temporary AWS creds exported in this shell (will persist for the rest of this step)."

            # Verify the assumed identity
            echo "Caller identity (should show assumed role ARN):"
            poetry run aws sts get-caller-identity

            # Example AWS action using the temporary creds
            echo "Listing S3 buckets (using assumed role credentials):"
            poetry run aws s3 ls
            sudo apt-get install -y terraform

            echo "Done. If you need these creds in later steps, we can write them to a file and persist to workspace."
            cd infra/circleci-oidc
            terraform init -input=false
            terraform plan -input=false -out=tfplan || (terraform show -json tfplan || true)
            terraform apply -auto-approve tfplan

      # - when:
      #     condition: << parameters.deploy-terraform >>
      #     steps:
      #       - run:
      #           name: Terraform Deploy (OIDC infra then main infra)
      #           command: |
      #             set -euo pipefail

workflows:
  version: 2
  verification:
    jobs:
      - test:
          <<: *deployment-branch-condition
      - lint:
          requires:
            - test
          <<: *deployment-branch-condition
      - assume-role-job:
          requires:
            - lint
          <<: *deployment-branch-condition
          role_arn: << pipeline.parameters.role_arn >>
