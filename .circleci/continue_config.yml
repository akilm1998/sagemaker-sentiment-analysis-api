version: 2.1

# Pipeline parameter: pass a role ARN at pipeline trigger time
parameters:
  role_arn:
    type: string
    default: "arn:aws:iam::313078327096:role/circleci-oidc-role"
    description: "Optional: role ARN to assume. If empty, the job will error and ask you to pass one."

orbs:
  continuation: circleci/continuation@2.0.1
  path-filtering: circleci/path-filtering@2.0.4
  terraform: circleci/terraform@3.7.0

executors:
  python-executor:
    docker:
      - image: cimg/python:3.10

anchors:
  deployment-branch-condition: &deployment-branch-condition
    filters:
      branches:
        only: main

jobs:
  test:
    executor: python-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - poetry-cache-v2-{{ checksum "poetry.lock" }}
            # - poetry-cache-
      - run:
          name: Install Poetry and project deps
          command: |
            python -m pip install --upgrade pip
            python -m pip install poetry
            poetry config virtualenvs.create true --local
            poetry install --no-interaction --no-ansi
      - run:
          name: Run tests
          command: |
            poetry run pytest -q

  lint:
    executor: python-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - poetry-cache-v2-{{ checksum "poetry.lock" }}
            # - poetry-cache-
      - run:
          name: Install Poetry and lint deps
          command: |
            python -m pip install --upgrade pip
            python -m pip install poetry
            poetry config virtualenvs.create true --local
            poetry install --no-interaction --no-ansi
      - run:
          name: Lint code (fail fast)
          command: |
            set -e
            poetry run black --check src tests
            poetry run flake8 src tests

  assume-role-job:
    executor: python-executor
    parameters:
      role_arn:
        type: string
        default: ""
        description: "The AWS role ARN to assume via OIDC (required)"
    steps:
      - checkout
      - attach_workspace:
          at: .

      - restore_cache:
          keys:
            - poetry-cache-v2-{{ checksum "poetry.lock" }}

      - run:
          name: Install Poetry and project deps (includes awscli)
          command: |
            set -euo pipefail
            python -m pip install --upgrade pip
            python -m pip install poetry
            poetry config virtualenvs.create true --local
            poetry install --no-interaction --no-ansi

            echo "poetry venv path: $(poetry env info -p || echo 'none')"
            echo "Verify aws present via poetry:"
            poetry run aws --version || (echo "poetry-run aws not found; check awscli in pyproject" && exit 1)

      - run:
          name: Validate input and OIDC token
          command: |
            set -euo pipefail
            if [ -z "<< parameters.role_arn >>" ]; then
              echo "ERROR: role_arn parameter is empty. Provide the role ARN by passing the pipeline parameter 'role_arn'."
              exit 1
            fi
            if [ -z "${CIRCLE_OIDC_TOKEN:-}" ]; then
              echo "ERROR: CIRCLE_OIDC_TOKEN not present. Ensure OIDC is enabled for this CircleCI project."
              exit 1
            fi
            echo "role_arn and CIRCLE_OIDC_TOKEN present."

      - run:
          name: Assume role (OIDC) via poetry-run aws and export temporary credentials
          command: |
            set -euo pipefail

            ROLE_ARN="<< parameters.role_arn >>"
            SESSION_NAME="circleci-oidc-$(date +%s)"

            echo "Assuming role: ${ROLE_ARN} (session: ${SESSION_NAME})"

            CREDS_JSON=$(poetry run aws sts assume-role-with-web-identity \
              --role-arn "${ROLE_ARN}" \
              --role-session-name "${SESSION_NAME}" \
              --web-identity-token "${CIRCLE_OIDC_TOKEN}" \
              --duration-seconds 900)

            # Extract creds using poetry-run python (avoid relying on shell here-docs)
            export AWS_ACCESS_KEY_ID=$(printf '%s' "$CREDS_JSON" | poetry run python -c 'import sys, json; print(json.load(sys.stdin)["Credentials"]["AccessKeyId"])')
            export AWS_SECRET_ACCESS_KEY=$(printf '%s' "$CREDS_JSON" | poetry run python -c 'import sys, json; print(json.load(sys.stdin)["Credentials"]["SecretAccessKey"])')
            export AWS_SESSION_TOKEN=$(printf '%s' "$CREDS_JSON" | poetry run python -c 'import sys, json; print(json.load(sys.stdin)["Credentials"]["SessionToken"])')

            echo "Assumed role â€” caller identity (should show assumed arn):"
            poetry run aws sts get-caller-identity

      - run:
          name: Example AWS action (List S3 buckets)
          command: |
            set -euo pipefail
            # aws is invoked through poetry so it runs inside the venv where awscli is installed
            poetry run aws s3 ls


workflows:
  version: 2
  verification:
    jobs:
      - test:
          <<: *deployment-branch-condition
      - lint:
          requires:
            - test
          <<: *deployment-branch-condition
      - assume-role-job:
          requires:
            - lint
          <<: *deployment-branch-condition
          role_arn: << pipeline.parameters.role_arn >>
