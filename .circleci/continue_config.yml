version: 2.1

# Pipeline parameter: pass a role ARN at pipeline trigger time
parameters:
  role_arn:
    type: string
    default: "arn:aws:iam::313078327096:role/circleci-oidc-role"
    description: "Optional: role ARN to assume. If empty, the job will error and ask you to pass one."

  deploy-terraform:
    type: boolean
    default: false

orbs:
  continuation: circleci/continuation@2.0.1
  path-filtering: circleci/path-filtering@2.0.4
  terraform: circleci/terraform@3.7.0

executors:
  python-executor:
    docker:
      - image: cimg/python:3.10

anchors:
  deployment-branch-condition: &deployment-branch-condition
    filters:
      branches:
        only: main

jobs:
  test:
    executor: python-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - poetry-cache-v2-{{ checksum "poetry.lock" }}
            # - poetry-cache-
      - run:
          name: Install Poetry and project deps
          command: |
            python -m pip install --upgrade pip
            python -m pip install poetry
            poetry config virtualenvs.create true --local
            poetry install --no-interaction --no-ansi
      - run:
          name: Run tests
          command: |
            poetry run pytest -q

  lint:
    executor: python-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - poetry-cache-v2-{{ checksum "poetry.lock" }}
            # - poetry-cache-
      - run:
          name: Install Poetry and lint deps
          command: |
            python -m pip install --upgrade pip
            python -m pip install poetry
            poetry config virtualenvs.create true --local
            poetry install --no-interaction --no-ansi
      - run:
          name: Lint code (fail fast)
          command: |
            set -e
            poetry run black --check src tests
            poetry run flake8 src tests

  assume-role-and-terraform:
    docker:
      - image: python:3.10-slim
    steps:
      - run:
          name: Install Terraform
          command: |
            apt-get update -y
            apt-get install -y curl unzip gnupg lsb-release
            curl -fsSL https://apt.releases.hashicorp.com/gpg | gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
            echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" > /etc/apt/sources.list.d/hashicorp.list
            apt-get update -y
            apt-get install -y terraform

  assume-role-and-terraform:
    docker:
      - image: python:3.10-slim
    parameters:
      role_arn:
        type: string
        default: ""
        description: "The AWS role ARN to assume via OIDC (required)"
    steps:
      - checkout

      - run:
          name: Install dependencies (AWS CLI + Terraform)
          command: |
            set -euo pipefail
            export DEBIAN_FRONTEND=noninteractive

            echo "Installing required system packages..."
            apt-get update -y
            apt-get install -y curl unzip gnupg lsb-release software-properties-common

            echo "Installing AWS CLI..."
            python3 -m pip install --upgrade pip
            python3 -m pip install awscli

            echo "Adding HashiCorp repo and installing Terraform..."
            curl -fsSL https://apt.releases.hashicorp.com/gpg | gpg --dearmor -o /usr/share/keyrings/hashicorp-archive-keyring.gpg
            echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com $(lsb_release -cs) main" \
              > /etc/apt/sources.list.d/hashicorp.list
            apt-get update -y
            apt-get install -y terraform

            echo "âœ… Installed versions:"
            python3 --version
            aws --version
            terraform version

      - run:
          name: Assume AWS Role via OIDC
          command: |
            set -euo pipefail

            if [ -z "<< parameters.role_arn >>" ]; then
              echo "ERROR: role_arn parameter is empty."
              exit 1
            fi
            if [ -z "${CIRCLE_OIDC_TOKEN:-}" ]; then
              echo "ERROR: CIRCLE_OIDC_TOKEN not present. Enable OIDC in CircleCI project settings."
              exit 1
            fi

            ROLE_ARN="<< parameters.role_arn >>"
            SESSION_NAME="circleci-oidc-$(date +%s)"
            echo "Assuming role: ${ROLE_ARN}"

            CREDS_JSON=$(aws sts assume-role-with-web-identity \
              --role-arn "${ROLE_ARN}" \
              --role-session-name "${SESSION_NAME}" \
              --web-identity-token "${CIRCLE_OIDC_TOKEN}" \
              --duration-seconds 900)

            export AWS_ACCESS_KEY_ID=$(echo "$CREDS_JSON" | python3 -c 'import sys,json; print(json.load(sys.stdin)["Credentials"]["AccessKeyId"])')
            export AWS_SECRET_ACCESS_KEY=$(echo "$CREDS_JSON" | python3 -c 'import sys,json; print(json.load(sys.stdin)["Credentials"]["SecretAccessKey"])')
            export AWS_SESSION_TOKEN=$(echo "$CREDS_JSON" | python3 -c 'import sys,json; print(json.load(sys.stdin)["Credentials"]["SessionToken"])')

            aws sts get-caller-identity

      - run:
          name: Terraform Apply (infra/circleci-oidc)
          command: |
            set -euo pipefail
            cd infra/circleci-oidc
            terraform init -input=false
            terraform plan -input=false -out=tfplan
            terraform apply -auto-approve tfplan
            echo "âœ… Deployed circleci-oidc infrastructure"

      - run:
          name: Terraform Apply (main infra)
          command: |
            set -euo pipefail
            cd ../
            terraform init -input=false
            terraform plan -input=false -out=tfplan
            terraform apply -auto-approve tfplan
            echo "âœ… Main infrastructure deployed successfully"

      - run:
          name: Cleanup AWS creds
          command: |
            unset AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN || true
            echo "ðŸ§¹ Temporary AWS credentials cleared."



      # - when:
      #     condition: << parameters.deploy-terraform >>
      #     steps:
      #       - run:
      #           name: Terraform Deploy (OIDC infra then main infra)
      #           command: |
      #             set -euo pipefail

workflows:
  version: 2
  verification:
    jobs:
      # - test:
      #     <<: *deployment-branch-condition
      # - lint:
      #     requires:
      #       - test
      #     <<: *deployment-branch-condition
      - assume-role-and-terraform:
          # requires:
          #   - lint
          <<: *deployment-branch-condition
          role_arn: << pipeline.parameters.role_arn >>
