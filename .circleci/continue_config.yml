version: 2.1

# Pipeline parameter: pass a role ARN at pipeline trigger time
parameters:
  role_arn:
    type: string
    default: "arn:aws:iam::313078327096:role/circleci-oidc-role"
    description: "Optional: role ARN to assume. If empty, the job will error and ask you to pass one."

  deploy-terraform:
    type: boolean
    default: false

orbs:
  continuation: circleci/continuation@2.0.1
  path-filtering: circleci/path-filtering@2.0.4
  terraform: circleci/terraform@3.7.0

executors:
  python-executor:
    docker:
      - image: cimg/python:3.10

anchors:
  deployment-branch-condition: &deployment-branch-condition
    filters:
      branches:
        only: main

jobs:
  test:
    executor: python-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - poetry-cache-v2-{{ checksum "poetry.lock" }}
            # - poetry-cache-
      - run:
          name: Install Poetry and project deps
          command: |
            python -m pip install --upgrade pip
            python -m pip install poetry
            poetry config virtualenvs.create true --local
            poetry install --no-interaction --no-ansi
      - run:
          name: Run tests
          command: |
            poetry run pytest -q

  lint:
    executor: python-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - restore_cache:
          keys:
            - poetry-cache-v2-{{ checksum "poetry.lock" }}
            # - poetry-cache-
      - run:
          name: Install Poetry and lint deps
          command: |
            python -m pip install --upgrade pip
            python -m pip install poetry
            poetry config virtualenvs.create true --local
            poetry install --no-interaction --no-ansi
      - run:
          name: Lint code (fail fast)
          command: |
            set -e
            poetry run black --check src tests
            poetry run flake8 src tests

assume-role-job:
  docker:
    - image: hashicorp/terraform:latest
  parameters:
    role_arn:
      type: string
      default: ""
      description: "The AWS role ARN to assume via OIDC (required)"
  steps:
    - checkout
    - attach_workspace:
        at: .

    - restore_cache:
        keys:
          - poetry-cache-v2-{{ checksum "poetry.lock" }}

    - run:
        name: Install Python, Poetry, and AWS CLI
        command: |
          set -euo pipefail
          apt-get update -y
          apt-get install -y python3 python3-pip python3-venv curl
          python3 -m pip install --upgrade pip
          python3 -m pip install poetry awscli
          poetry --version
          aws --version

    - run:
        name: Assume role (OIDC) and Terraform deploy
        command: |
          set -euo pipefail

          if [ -z "<< parameters.role_arn >>" ]; then
            echo "ERROR: role_arn parameter is empty."
            exit 1
          fi
          if [ -z "${CIRCLE_OIDC_TOKEN:-}" ]; then
            echo "ERROR: CIRCLE_OIDC_TOKEN not present. Ensure OIDC is enabled."
            exit 1
          fi

          ROLE_ARN="<< parameters.role_arn >>"
          SESSION_NAME="circleci-oidc-$(date +%s)"

          echo "Attempting to assume role: ${ROLE_ARN}, session: ${SESSION_NAME}"

          CREDS_JSON=$(aws sts assume-role-with-web-identity \
            --role-arn "${ROLE_ARN}" \
            --role-session-name "${SESSION_NAME}" \
            --web-identity-token "${CIRCLE_OIDC_TOKEN}" \
            --duration-seconds 900)

          export AWS_ACCESS_KEY_ID=$(echo "$CREDS_JSON" | python3 -c 'import sys, json; print(json.load(sys.stdin)["Credentials"]["AccessKeyId"])')
          export AWS_SECRET_ACCESS_KEY=$(echo "$CREDS_JSON" | python3 -c 'import sys, json; print(json.load(sys.stdin)["Credentials"]["SecretAccessKey"])')
          export AWS_SESSION_TOKEN=$(echo "$CREDS_JSON" | python3 -c 'import sys, json; print(json.load(sys.stdin)["Credentials"]["SessionToken"])')

          aws sts get-caller-identity

          echo "Listing S3 buckets (to verify assumed role):"
          aws s3 ls

          cd infra/circleci-oidc
          terraform init -input=false
          terraform plan -input=false -out=tfplan
          terraform apply -auto-approve tfplan


      # - when:
      #     condition: << parameters.deploy-terraform >>
      #     steps:
      #       - run:
      #           name: Terraform Deploy (OIDC infra then main infra)
      #           command: |
      #             set -euo pipefail

workflows:
  version: 2
  verification:
    jobs:
      - test:
          <<: *deployment-branch-condition
      - lint:
          requires:
            - test
          <<: *deployment-branch-condition
      - assume-role-job:
          requires:
            - lint
          <<: *deployment-branch-condition
          role_arn: << pipeline.parameters.role_arn >>
