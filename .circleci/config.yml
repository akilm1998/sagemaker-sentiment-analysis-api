version: 2.1

# This file is the "setup" phase only. It starts the agent work,
# prepares & persists workspace, and then continues with continue_config.yml

setup: true

orbs:
  continuation: circleci/continuation@2.0.1 #https://circleci.com/developer/orbs/orb/circleci/continuation
  path-filtering: circleci/path-filtering@2.0.4 #https://circleci.com/developer/orbs/orb/circleci/path-filtering

jobs:
  prepare:
    docker:
      - image: cimg/python:3.10
    steps:
      - checkout

      - restore_cache:
          keys:
            - poetry-cache-v2-{{ checksum "poetry.lock" }}

      - run:
          name: Install Poetry and project deps
          command: |
            python -m pip install --upgrade pip
            python -m pip install poetry
            poetry config virtualenvs.create true --local
            poetry install --no-interaction --no-ansi

      - save_cache:
          paths:
            - ~/.cache/pypoetry
            - ~/.cache/pip
          key: poetry-cache-v2-{{ checksum "poetry.lock" }}

      - persist_to_workspace:
          root: .
          paths:
            - pyproject.toml
            - poetry.lock

  # clear-caches:
  #   docker:
  #     - image: cimg/base:stable
  #   steps:
  #     - run:
  #         name: Validate inputs
  #         command: |
  #           set -euo pipefail
  #           if [ -z "${CIRCLECI_API_TOKEN}" ]; then
  #             echo "ERROR: CIRCLECI_API_TOKEN environment variable not set in context 'circleci'."
  #             exit 1
  #           fi
  #           echo "Using CircleCI API token from context 'circleci'."

  #           # We derive project info from the known project URL you supplied
  #           ORG="akilm1998"
  #           REPO="sagemaker-sentiment-analysis-api"
  #           SLUG="gh/${ORG}/${REPO}"

  #           echo "Project slug: ${SLUG}"
  #           echo "This job will delete caches with prefix: poetry-cache-"

  #     - run:
  #         name: Delete caches with prefix poetry-cache-
  #         command: |
  #           set -euo pipefail

  #           ORG="akilm1998"
  #           REPO="sagemaker-sentiment-analysis-api"
  #           PREFIX="poetry-cache-"
  #           PROJECT_SLUG="gh/${ORG}/${REPO}"

  #           echo "Requesting cache deletion for project ${PROJECT_SLUG} with prefix '${PREFIX}'..."

  #           # Use curl to delete caches by prefix and capture HTTP status code.
  #           HTTP_CODE=$(
  #             curl -s -w "%{http_code}" -o /tmp/clear-cache-response.json \
  #               -X DELETE \
  #               -u "${CIRCLECI_API_TOKEN}:" \
  #               "https://circleci.com/api/v2/project/${PROJECT_SLUG}/cache?key=${PREFIX}"
  #           ) || true

  #           if [ -s /tmp/clear-cache-response.json ]; then
  #             echo "API response body:"
  #             cat /tmp/clear-cache-response.json || true
  #           fi

  #           if [ -n "${HTTP_CODE:-}" ]; then
  #             echo "HTTP status: ${HTTP_CODE}"
  #             if [ "${HTTP_CODE}" = "204" ] || [ "${HTTP_CODE}" = "200" ]; then
  #               echo "Cache deletion request accepted."
  #             else
  #               echo "Cache deletion request returned status ${HTTP_CODE}. Check /tmp/clear-cache-response.json for details."
  #               exit 1
  #             fi
  #           else
  #             echo "No HTTP status captured from curl; check the API output above."
  #             exit 1
  #           fi

  #           echo "Done."

workflows:
  build-setup:
    jobs:
      - prepare
      - continuation/continue:
          requires:
            - prepare
          # path to the config you want to continue into
          configuration_path: .circleci/continue_config.yml
          # optional: parameters can be passed as a JSON string
          # parameters: '{ "some_flag": true }'

      # - clear-caches-approval:
      #     type: approval

      # # actual cache-deletion job; only runs after manual approval
      # - clear-caches:
      #     context: circleci
      #     requires:
      #       - clear-caches-approval
